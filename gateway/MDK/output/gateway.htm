<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\gateway.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\gateway.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Nov 06 09:15:40 2021
<BR><P>
<H3>Maximum Stack Usage =        396 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ethernet_run &rArr; scoket_dns_handle &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9c]">IRQ133_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9c]">IRQ133_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">BusFault_Handler</a> from hc32f46x_interrupts.o(i.BusFault_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[14]">DebugMon_Handler</a> from hc32f46x_interrupts.o(i.DebugMon_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[f]">HardFault_Handler</a> from hc32f46x_interrupts.o(i.HardFault_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[17]">IRQ000_Handler</a> from hc32f46x_interrupts.o(i.IRQ000_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[18]">IRQ001_Handler</a> from hc32f46x_interrupts.o(i.IRQ001_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[19]">IRQ002_Handler</a> from hc32f46x_interrupts.o(i.IRQ002_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1a]">IRQ003_Handler</a> from hc32f46x_interrupts.o(i.IRQ003_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1b]">IRQ004_Handler</a> from hc32f46x_interrupts.o(i.IRQ004_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1c]">IRQ005_Handler</a> from hc32f46x_interrupts.o(i.IRQ005_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1d]">IRQ006_Handler</a> from hc32f46x_interrupts.o(i.IRQ006_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1e]">IRQ007_Handler</a> from hc32f46x_interrupts.o(i.IRQ007_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[1f]">IRQ008_Handler</a> from hc32f46x_interrupts.o(i.IRQ008_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[20]">IRQ009_Handler</a> from hc32f46x_interrupts.o(i.IRQ009_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[21]">IRQ010_Handler</a> from hc32f46x_interrupts.o(i.IRQ010_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[22]">IRQ011_Handler</a> from hc32f46x_interrupts.o(i.IRQ011_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[23]">IRQ012_Handler</a> from hc32f46x_interrupts.o(i.IRQ012_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[24]">IRQ013_Handler</a> from hc32f46x_interrupts.o(i.IRQ013_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[25]">IRQ014_Handler</a> from hc32f46x_interrupts.o(i.IRQ014_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[26]">IRQ015_Handler</a> from hc32f46x_interrupts.o(i.IRQ015_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[27]">IRQ016_Handler</a> from hc32f46x_interrupts.o(i.IRQ016_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[28]">IRQ017_Handler</a> from hc32f46x_interrupts.o(i.IRQ017_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[29]">IRQ018_Handler</a> from hc32f46x_interrupts.o(i.IRQ018_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2a]">IRQ019_Handler</a> from hc32f46x_interrupts.o(i.IRQ019_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2b]">IRQ020_Handler</a> from hc32f46x_interrupts.o(i.IRQ020_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2c]">IRQ021_Handler</a> from hc32f46x_interrupts.o(i.IRQ021_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2d]">IRQ022_Handler</a> from hc32f46x_interrupts.o(i.IRQ022_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2e]">IRQ023_Handler</a> from hc32f46x_interrupts.o(i.IRQ023_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[2f]">IRQ024_Handler</a> from hc32f46x_interrupts.o(i.IRQ024_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[30]">IRQ025_Handler</a> from hc32f46x_interrupts.o(i.IRQ025_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[31]">IRQ026_Handler</a> from hc32f46x_interrupts.o(i.IRQ026_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[32]">IRQ027_Handler</a> from hc32f46x_interrupts.o(i.IRQ027_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[33]">IRQ028_Handler</a> from hc32f46x_interrupts.o(i.IRQ028_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[34]">IRQ029_Handler</a> from hc32f46x_interrupts.o(i.IRQ029_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[35]">IRQ030_Handler</a> from hc32f46x_interrupts.o(i.IRQ030_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[36]">IRQ031_Handler</a> from hc32f46x_interrupts.o(i.IRQ031_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[37]">IRQ032_Handler</a> from hc32f46x_interrupts.o(i.IRQ032_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[38]">IRQ033_Handler</a> from hc32f46x_interrupts.o(i.IRQ033_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[39]">IRQ034_Handler</a> from hc32f46x_interrupts.o(i.IRQ034_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3a]">IRQ035_Handler</a> from hc32f46x_interrupts.o(i.IRQ035_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3b]">IRQ036_Handler</a> from hc32f46x_interrupts.o(i.IRQ036_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3c]">IRQ037_Handler</a> from hc32f46x_interrupts.o(i.IRQ037_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3d]">IRQ038_Handler</a> from hc32f46x_interrupts.o(i.IRQ038_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3e]">IRQ039_Handler</a> from hc32f46x_interrupts.o(i.IRQ039_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[3f]">IRQ040_Handler</a> from hc32f46x_interrupts.o(i.IRQ040_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[40]">IRQ041_Handler</a> from hc32f46x_interrupts.o(i.IRQ041_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[41]">IRQ042_Handler</a> from hc32f46x_interrupts.o(i.IRQ042_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[42]">IRQ043_Handler</a> from hc32f46x_interrupts.o(i.IRQ043_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[43]">IRQ044_Handler</a> from hc32f46x_interrupts.o(i.IRQ044_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[44]">IRQ045_Handler</a> from hc32f46x_interrupts.o(i.IRQ045_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[45]">IRQ046_Handler</a> from hc32f46x_interrupts.o(i.IRQ046_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[46]">IRQ047_Handler</a> from hc32f46x_interrupts.o(i.IRQ047_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[47]">IRQ048_Handler</a> from hc32f46x_interrupts.o(i.IRQ048_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[48]">IRQ049_Handler</a> from hc32f46x_interrupts.o(i.IRQ049_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[49]">IRQ050_Handler</a> from hc32f46x_interrupts.o(i.IRQ050_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4a]">IRQ051_Handler</a> from hc32f46x_interrupts.o(i.IRQ051_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4b]">IRQ052_Handler</a> from hc32f46x_interrupts.o(i.IRQ052_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4c]">IRQ053_Handler</a> from hc32f46x_interrupts.o(i.IRQ053_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4d]">IRQ054_Handler</a> from hc32f46x_interrupts.o(i.IRQ054_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4e]">IRQ055_Handler</a> from hc32f46x_interrupts.o(i.IRQ055_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[4f]">IRQ056_Handler</a> from hc32f46x_interrupts.o(i.IRQ056_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[50]">IRQ057_Handler</a> from hc32f46x_interrupts.o(i.IRQ057_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[51]">IRQ058_Handler</a> from hc32f46x_interrupts.o(i.IRQ058_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[52]">IRQ059_Handler</a> from hc32f46x_interrupts.o(i.IRQ059_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[53]">IRQ060_Handler</a> from hc32f46x_interrupts.o(i.IRQ060_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[54]">IRQ061_Handler</a> from hc32f46x_interrupts.o(i.IRQ061_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[55]">IRQ062_Handler</a> from hc32f46x_interrupts.o(i.IRQ062_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[56]">IRQ063_Handler</a> from hc32f46x_interrupts.o(i.IRQ063_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[57]">IRQ064_Handler</a> from hc32f46x_interrupts.o(i.IRQ064_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[58]">IRQ065_Handler</a> from hc32f46x_interrupts.o(i.IRQ065_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[59]">IRQ066_Handler</a> from hc32f46x_interrupts.o(i.IRQ066_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5a]">IRQ067_Handler</a> from hc32f46x_interrupts.o(i.IRQ067_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5b]">IRQ068_Handler</a> from hc32f46x_interrupts.o(i.IRQ068_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5c]">IRQ069_Handler</a> from hc32f46x_interrupts.o(i.IRQ069_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5d]">IRQ070_Handler</a> from hc32f46x_interrupts.o(i.IRQ070_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5e]">IRQ071_Handler</a> from hc32f46x_interrupts.o(i.IRQ071_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[5f]">IRQ072_Handler</a> from hc32f46x_interrupts.o(i.IRQ072_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[60]">IRQ073_Handler</a> from hc32f46x_interrupts.o(i.IRQ073_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[61]">IRQ074_Handler</a> from hc32f46x_interrupts.o(i.IRQ074_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[62]">IRQ075_Handler</a> from hc32f46x_interrupts.o(i.IRQ075_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[63]">IRQ076_Handler</a> from hc32f46x_interrupts.o(i.IRQ076_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[64]">IRQ077_Handler</a> from hc32f46x_interrupts.o(i.IRQ077_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[65]">IRQ078_Handler</a> from hc32f46x_interrupts.o(i.IRQ078_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[66]">IRQ079_Handler</a> from hc32f46x_interrupts.o(i.IRQ079_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[67]">IRQ080_Handler</a> from hc32f46x_interrupts.o(i.IRQ080_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[68]">IRQ081_Handler</a> from hc32f46x_interrupts.o(i.IRQ081_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[69]">IRQ082_Handler</a> from hc32f46x_interrupts.o(i.IRQ082_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6a]">IRQ083_Handler</a> from hc32f46x_interrupts.o(i.IRQ083_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6b]">IRQ084_Handler</a> from hc32f46x_interrupts.o(i.IRQ084_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6c]">IRQ085_Handler</a> from hc32f46x_interrupts.o(i.IRQ085_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6d]">IRQ086_Handler</a> from hc32f46x_interrupts.o(i.IRQ086_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6e]">IRQ087_Handler</a> from hc32f46x_interrupts.o(i.IRQ087_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[6f]">IRQ088_Handler</a> from hc32f46x_interrupts.o(i.IRQ088_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[70]">IRQ089_Handler</a> from hc32f46x_interrupts.o(i.IRQ089_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[71]">IRQ090_Handler</a> from hc32f46x_interrupts.o(i.IRQ090_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[72]">IRQ091_Handler</a> from hc32f46x_interrupts.o(i.IRQ091_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[73]">IRQ092_Handler</a> from hc32f46x_interrupts.o(i.IRQ092_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[74]">IRQ093_Handler</a> from hc32f46x_interrupts.o(i.IRQ093_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[75]">IRQ094_Handler</a> from hc32f46x_interrupts.o(i.IRQ094_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[76]">IRQ095_Handler</a> from hc32f46x_interrupts.o(i.IRQ095_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[77]">IRQ096_Handler</a> from hc32f46x_interrupts.o(i.IRQ096_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[78]">IRQ097_Handler</a> from hc32f46x_interrupts.o(i.IRQ097_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[79]">IRQ098_Handler</a> from hc32f46x_interrupts.o(i.IRQ098_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7a]">IRQ099_Handler</a> from hc32f46x_interrupts.o(i.IRQ099_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7b]">IRQ100_Handler</a> from hc32f46x_interrupts.o(i.IRQ100_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7c]">IRQ101_Handler</a> from hc32f46x_interrupts.o(i.IRQ101_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7d]">IRQ102_Handler</a> from hc32f46x_interrupts.o(i.IRQ102_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7e]">IRQ103_Handler</a> from hc32f46x_interrupts.o(i.IRQ103_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[7f]">IRQ104_Handler</a> from hc32f46x_interrupts.o(i.IRQ104_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[80]">IRQ105_Handler</a> from hc32f46x_interrupts.o(i.IRQ105_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[81]">IRQ106_Handler</a> from hc32f46x_interrupts.o(i.IRQ106_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[82]">IRQ107_Handler</a> from hc32f46x_interrupts.o(i.IRQ107_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[83]">IRQ108_Handler</a> from hc32f46x_interrupts.o(i.IRQ108_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[84]">IRQ109_Handler</a> from hc32f46x_interrupts.o(i.IRQ109_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[85]">IRQ110_Handler</a> from hc32f46x_interrupts.o(i.IRQ110_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[86]">IRQ111_Handler</a> from hc32f46x_interrupts.o(i.IRQ111_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[87]">IRQ112_Handler</a> from hc32f46x_interrupts.o(i.IRQ112_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[88]">IRQ113_Handler</a> from hc32f46x_interrupts.o(i.IRQ113_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[89]">IRQ114_Handler</a> from hc32f46x_interrupts.o(i.IRQ114_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8a]">IRQ115_Handler</a> from hc32f46x_interrupts.o(i.IRQ115_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8b]">IRQ116_Handler</a> from hc32f46x_interrupts.o(i.IRQ116_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8c]">IRQ117_Handler</a> from hc32f46x_interrupts.o(i.IRQ117_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8d]">IRQ118_Handler</a> from hc32f46x_interrupts.o(i.IRQ118_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8e]">IRQ119_Handler</a> from hc32f46x_interrupts.o(i.IRQ119_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[8f]">IRQ120_Handler</a> from hc32f46x_interrupts.o(i.IRQ120_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[90]">IRQ121_Handler</a> from hc32f46x_interrupts.o(i.IRQ121_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[91]">IRQ122_Handler</a> from hc32f46x_interrupts.o(i.IRQ122_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[92]">IRQ123_Handler</a> from hc32f46x_interrupts.o(i.IRQ123_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[93]">IRQ124_Handler</a> from hc32f46x_interrupts.o(i.IRQ124_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[94]">IRQ125_Handler</a> from hc32f46x_interrupts.o(i.IRQ125_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[95]">IRQ126_Handler</a> from hc32f46x_interrupts.o(i.IRQ126_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[96]">IRQ127_Handler</a> from hc32f46x_interrupts.o(i.IRQ127_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[97]">IRQ128_Handler</a> from hc32f46x_interrupts.o(i.IRQ128_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[98]">IRQ129_Handler</a> from hc32f46x_interrupts.o(i.IRQ129_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[99]">IRQ130_Handler</a> from hc32f46x_interrupts.o(i.IRQ130_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9a]">IRQ131_Handler</a> from hc32f46x_interrupts.o(i.IRQ131_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9b]">IRQ132_Handler</a> from hc32f46x_interrupts.o(i.IRQ132_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9c]">IRQ133_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9d]">IRQ134_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9e]">IRQ135_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[9f]">IRQ136_Handler</a> from hc32f46x_interrupts.o(i.IRQ136_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a0]">IRQ137_Handler</a> from hc32f46x_interrupts.o(i.IRQ137_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a1]">IRQ138_Handler</a> from hc32f46x_interrupts.o(i.IRQ138_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a2]">IRQ139_Handler</a> from hc32f46x_interrupts.o(i.IRQ139_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a3]">IRQ140_Handler</a> from hc32f46x_interrupts.o(i.IRQ140_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a4]">IRQ141_Handler</a> from hc32f46x_interrupts.o(i.IRQ141_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a5]">IRQ142_Handler</a> from hc32f46x_interrupts.o(i.IRQ142_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a6]">IRQ143_Handler</a> from hc32f46x_interrupts.o(i.IRQ143_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[10]">MemManage_Handler</a> from hc32f46x_interrupts.o(i.MemManage_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[e]">NMI_Handler</a> from hc32f46x_interrupts.o(i.NMI_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[15]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[d]">Reset_Handler</a> from startup_hc32f46x.o(.text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[c3]">SPI_CS_Deselect</a> from spi.o(i.SPI_CS_Deselect) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c4]">SPI_CS_Select</a> from spi.o(i.SPI_CS_Select) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c2]">SPI_CrisEnter</a> from spi.o(i.SPI_CrisEnter) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c1]">SPI_CrisExit</a> from spi.o(i.SPI_CrisExit) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c6]">SPI_ReadByte</a> from spi.o(i.SPI_ReadByte) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c5]">SPI_WriteByte</a> from spi.o(i.SPI_WriteByte) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[13]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[16]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[a8]">SystemInit</a> from system_hc32f46x.o(i.SystemInit) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[af]">Timer0A_CallBack</a> from logic_control_bsp.o(i.Timer0A_CallBack) referenced from logic_control_bsp.o(i.logic_control_time_int)
 <LI><a href="#[bb]">Timer6_OverFlow_CallBack</a> from rs458_analysis.o(i.Timer6_OverFlow_CallBack) referenced from rs458_bsp.o(i.time6_init)
 <LI><a href="#[12]">UsageFault_Handler</a> from hc32f46x_interrupts.o(i.UsageFault_Handler) referenced from startup_hc32f46x.o(RESET)
 <LI><a href="#[bd]">Usart3_ErrIrqCallback</a> from rs458_bsp.o(i.Usart3_ErrIrqCallback) referenced from rs458_bsp.o(i.usart3_init)
 <LI><a href="#[bf]">Usart4_ErrIrqCallback</a> from rs458_bsp.o(i.Usart4_ErrIrqCallback) referenced from rs458_bsp.o(i.usart4_init)
 <LI><a href="#[bc]">UsartRx3IrqCallback</a> from rs458_analysis.o(i.UsartRx3IrqCallback) referenced from rs458_bsp.o(i.usart3_init)
 <LI><a href="#[be]">UsartRx4IrqCallback</a> from rs458_analysis.o(i.UsartRx4IrqCallback) referenced from rs458_bsp.o(i.usart4_init)
 <LI><a href="#[a9]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f46x.o(.text)
 <LI><a href="#[ab]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[b6]">broker_task</a> from broker_task.o(i.broker_task) referenced from start_task.o(i.start_task)
 <LI><a href="#[ba]">control_task</a> from gpio_manage_business.o(i.control_task) referenced from start_task.o(i.start_task)
 <LI><a href="#[4]">default_ip_assign</a> from dhcp.o(i.default_ip_assign) referenced 2 times from dhcp.o(.data)
 <LI><a href="#[4]">default_ip_assign</a> from dhcp.o(i.default_ip_assign) referenced from dhcp.o(i.reg_dhcp_cbfunc)
 <LI><a href="#[6]">default_ip_conflict</a> from dhcp.o(i.default_ip_conflict) referenced 2 times from dhcp.o(.data)
 <LI><a href="#[6]">default_ip_conflict</a> from dhcp.o(i.default_ip_conflict) referenced from dhcp.o(i.reg_dhcp_cbfunc)
 <LI><a href="#[5]">default_ip_update</a> from dhcp.o(i.default_ip_update) referenced 2 times from dhcp.o(.data)
 <LI><a href="#[5]">default_ip_update</a> from dhcp.o(i.default_ip_update) referenced from dhcp.o(i.reg_dhcp_cbfunc)
 <LI><a href="#[d7]">ethernet_driver_init</a> from ethernet_operation.o(i.ethernet_driver_init) referenced from ethernet_task.o(.constdata)
 <LI><a href="#[d8]">ethernet_run</a> from ethernet_operation.o(i.ethernet_run) referenced from ethernet_task.o(.constdata)
 <LI><a href="#[b8]">ethernet_task</a> from ethernet_task.o(i.ethernet_task) referenced from start_task.o(i.start_task)
 <LI><a href="#[aa]">fputc</a> from hc32f46x_utility.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[d3]">hotel_air_conditioner_instructions</a> from ethernet_hotel_agreement.o(i.hotel_air_conditioner_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[d1]">hotel_call_service_instructions</a> from ethernet_hotel_agreement.o(i.hotel_call_service_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[cc]">hotel_card_power_on_instructions</a> from ethernet_hotel_agreement.o(i.hotel_card_power_on_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[cf]">hotel_cleaning_instructions</a> from ethernet_hotel_agreement.o(i.hotel_cleaning_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[cb]">hotel_combination_instructions</a> from ethernet_hotel_agreement.o(i.hotel_combination_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[d5]">hotel_curtain_instructions</a> from ethernet_hotel_agreement.o(i.hotel_curtain_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[ce]">hotel_do_not_disturb_instructions</a> from ethernet_hotel_agreement.o(i.hotel_do_not_disturb_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[cd]">hotel_doorbell_instructions</a> from ethernet_hotel_agreement.o(i.hotel_doorbell_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[c9]">hotel_lamp_instructions</a> from ethernet_hotel_agreement.o(i.hotel_lamp_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[d4]">hotel_null_instructions</a> from ethernet_hotel_agreement.o(i.hotel_null_instructions) referenced 6 times from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[d6]">hotel_open_door_instructions</a> from ethernet_hotel_agreement.o(i.hotel_open_door_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[d2]">hotel_reservation_check_instructions</a> from ethernet_hotel_agreement.o(i.hotel_reservation_check_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[ca]">hotel_scene_instructions</a> from ethernet_hotel_agreement.o(i.hotel_scene_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[d0]">hotel_sos_instructions</a> from ethernet_hotel_agreement.o(i.hotel_sos_instructions) referenced from ethernet_hotel_agreement.o(.constdata)
 <LI><a href="#[ad]">key_value_analysis_form_subscribe</a> from logic_control_task.o(i.key_value_analysis_form_subscribe) referenced from logic_control_task.o(i.key_value_analysis_cache)
 <LI><a href="#[ae]">logic_control_interrupt_callback</a> from logic_control_task.o(i.logic_control_interrupt_callback) referenced from logic_control_task.o(i.logic_control_task)
 <LI><a href="#[b9]">logic_control_task</a> from logic_control_task.o(i.logic_control_task) referenced from start_task.o(i.start_task)
 <LI><a href="#[a7]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c8]">my_ip_assign</a> from ethernet_operation.o(i.my_ip_assign) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c7]">my_ip_conflict</a> from ethernet_operation.o(i.my_ip_conflict) referenced from ethernet_operation.o(i.w5500_init)
 <LI><a href="#[c0]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[b1]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[b4]">rs485_inside_analysis_handle</a> from rs458_task.o(i.rs485_inside_analysis_handle) referenced from rs458_task.o(i.rs485_task)
 <LI><a href="#[b5]">rs485_outside_analysis_handle</a> from rs458_task.o(i.rs485_outside_analysis_handle) referenced from rs458_task.o(i.rs485_task)
 <LI><a href="#[b7]">rs485_task</a> from rs458_task.o(i.rs485_task) referenced from start_task.o(i.start_task)
 <LI><a href="#[3]">scoket_balanced</a> from ethernet_data_handle.o(i.scoket_balanced) referenced 2 times from ethernet_operation.o(.data)
 <LI><a href="#[0]">scoket_cloud</a> from ethernet_data_handle.o(i.scoket_cloud) referenced 2 times from ethernet_operation.o(.data)
 <LI><a href="#[1]">scoket_set</a> from ethernet_data_handle.o(i.scoket_set) referenced 2 times from ethernet_operation.o(.data)
 <LI><a href="#[2]">scoket_udp</a> from ethernet_data_handle.o(i.scoket_udp) referenced 2 times from ethernet_operation.o(.data)
 <LI><a href="#[b0]">start_task</a> from start_task.o(i.start_task) referenced from main.o(i.main)
 <LI><a href="#[ac]">switch_read_subscribe</a> from gpio_manage_business.o(i.switch_read_subscribe) referenced from gpio_manage_business.o(i.control_task)
 <LI><a href="#[b]">wizchip_bus_readbyte</a> from wizchip_conf.o(i.wizchip_bus_readbyte) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[c]">wizchip_bus_writebyte</a> from wizchip_conf.o(i.wizchip_bus_writebyte) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[7]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[7]">wizchip_cris_enter</a> from wizchip_conf.o(i.wizchip_cris_enter) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[8]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[8]">wizchip_cris_exit</a> from wizchip_conf.o(i.wizchip_cris_exit) referenced from wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
 <LI><a href="#[a]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[a]">wizchip_cs_deselect</a> from wizchip_conf.o(i.wizchip_cs_deselect) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[9]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.data)
 <LI><a href="#[9]">wizchip_cs_select</a> from wizchip_conf.o(i.wizchip_cs_select) referenced from wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
 <LI><a href="#[b2]">wizchip_spi_readbyte</a> from wizchip_conf.o(i.wizchip_spi_readbyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
 <LI><a href="#[b3]">wizchip_spi_writebyte</a> from wizchip_conf.o(i.wizchip_spi_writebyte) referenced from wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a9]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[de]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[221]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[222]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[223]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[224]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[225]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[13]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[db]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[15]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED, KEPT)

<P><STRONG><a name="[d]"></a>Reset_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ133_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f46x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_system_data
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_data_analysis
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uesr_data_reset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_data_release
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_buff_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data_to_cache
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_push_information
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_ethernet_transmission
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_set_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scene_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_room_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_logic_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_system_data
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_cache_data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_analysis_handle
</UL>

<P><STRONG><a name="[144]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_control_handle
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_handle
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
</UL>

<P><STRONG><a name="[226]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_clear
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_data_release
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_release_information
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_broker_information
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_set
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_analysis_handle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_analysis_handle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_analysis_handle
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[142]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_data_analysis
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_of_air_conditioning_instructions
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dry_contac_input_analysis
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_push_information
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_485_analysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_485_analysis
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_send_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_send_handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_send_handle
</UL>

<P><STRONG><a name="[191]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[190]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[185]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[22b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[22c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[22e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[22f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[230]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>CLK_GetFlagStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[f4]"></a>CLK_HrcCmd</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, hc32f46x_clk.o(i.CLK_HrcCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_HrcCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[f5]"></a>CLK_MpllCmd</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, hc32f46x_clk.o(i.CLK_MpllCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_MpllCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[f6]"></a>CLK_MpllConfig</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_MpllConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_MpllConfig &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[f7]"></a>CLK_SetPllSource</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, hc32f46x_clk.o(i.CLK_SetPllSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetPllSource &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[f8]"></a>CLK_SetSysClkSource</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetSysClkSource &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[fa]"></a>CLK_SysClkConfig</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, hc32f46x_clk.o(i.CLK_SysClkConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SysClkConfig &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[fb]"></a>CLK_Xtal32Cmd</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, hc32f46x_clk.o(i.CLK_Xtal32Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_Xtal32Cmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
</UL>

<P><STRONG><a name="[fc]"></a>CLK_XtalCmd</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, hc32f46x_clk.o(i.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_XtalCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[20b]"></a>CLK_XtalConfig</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hc32f46x_clk.o(i.CLK_XtalConfig))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[fd]"></a>DHCP_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, dhcp.o(i.DHCP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DHCP_init &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DHCP_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[101]"></a>DHCP_run</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, dhcp.o(i.DHCP_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DHCP_run &rArr; parseDHCPMSG &rArr; recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DHCP_timeout
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDHCPMSG
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[d9]"></a>DHCP_time_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dhcp.o(i.DHCP_time_handler), UNUSED, KEPT)

<P><STRONG><a name="[dd]"></a>Ddl_AssertHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.Ddl_AssertHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_StartCount
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_SetTriggerSrc0
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_SetPeriod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_ConfigIrq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetClkMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
</UL>

<P><STRONG><a name="[14]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.DebugMon_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>DebugOutput</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_utility.o(i.DebugOutput))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[10e]"></a>EFM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[10a]"></a>EFM_ErasePgmCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32f46x_efm.o(i.EFM_ErasePgmCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
</UL>

<P><STRONG><a name="[10b]"></a>EFM_FlashCmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hc32f46x_efm.o(i.EFM_FlashCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_FlashCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[10c]"></a>EFM_GetFlagStatus</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hc32f46x_efm.o(i.EFM_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[146]"></a>EFM_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[10d]"></a>EFM_SectorErase</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, hc32f46x_efm.o(i.EFM_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EFM_SectorErase &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[10f]"></a>EFM_SetLatency</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hc32f46x_efm.o(i.EFM_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFM_SetLatency &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[110]"></a>EFM_SingleProgram</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, hc32f46x_efm.o(i.EFM_SingleProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ErasePgmCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_ClearFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[145]"></a>EFM_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32f46x_efm.o(i.EFM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>

<P><STRONG><a name="[f]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ032_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ033_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ034_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ035_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ036_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ037_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ038_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ039_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ040_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ041_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ042_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ043_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ044_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ045_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ046_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ047_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ048_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ049_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ050_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ051_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ052_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ053_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ054_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ055_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ056_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ057_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ058_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ059_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ060_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ061_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ062_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ063_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ064_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ065_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ066_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ067_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ068_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ069_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ070_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ071_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ072_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ073_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ074_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ075_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ076_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ077_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ078_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ079_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ080_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ081_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ082_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ083_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ084_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ085_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ086_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ087_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ088_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ089_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ090_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ091_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ092_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ093_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ094_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ095_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ096_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ097_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ098_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ099_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ100_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ101_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ102_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ103_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ104_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ105_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ106_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ107_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ108_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ109_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ110_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ111_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ112_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ113_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ114_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ115_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ116_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ117_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ118_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ119_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ120_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ121_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ122_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ123_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ124_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ125_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ126_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ127_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ128_Handler</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ128_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ129_Handler</STRONG> (Thumb, 1126 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ129_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ129_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ130_Handler</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.IRQ130_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ130_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ131_Handler</STRONG> (Thumb, 684 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ131_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ131_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ132_Handler</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ132_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ132_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ136_Handler</STRONG> (Thumb, 750 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ136_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ136_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ137_Handler</STRONG> (Thumb, 620 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ137_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ137_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ138_Handler</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ138_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ138_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ139_Handler</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ139_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ139_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ140_Handler</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ140_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ140_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ141_Handler</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ141_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ141_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ142_Handler</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.IRQ142_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ142_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IRQ143_Handler</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, hc32f46x_interrupts.o(i.IRQ143_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ143_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>PORT_DebugPortSetting</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, hc32f46x_gpio.o(i.PORT_DebugPortSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORT_DebugPortSetting &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_init
</UL>

<P><STRONG><a name="[114]"></a>PORT_GetBit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, hc32f46x_gpio.o(i.PORT_GetBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORT_GetBit &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_read
</UL>

<P><STRONG><a name="[115]"></a>PORT_Init</STRONG> (Thumb, 474 bytes, Stack size 32 bytes, hc32f46x_gpio.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[113]"></a>PORT_Lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>

<P><STRONG><a name="[116]"></a>PORT_ResetBits</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32f46x_gpio.o(i.PORT_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORT_ResetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_write
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Select
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_send_buff
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_send_buff
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
</UL>

<P><STRONG><a name="[117]"></a>PORT_SetBits</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hc32f46x_gpio.o(i.PORT_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_write
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CS_Deselect
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_send_buff
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_send_buff
</UL>

<P><STRONG><a name="[118]"></a>PORT_SetFunc</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, hc32f46x_gpio.o(i.PORT_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PORT_SetFunc &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Unlock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Lock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[112]"></a>PORT_Unlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hc32f46x_gpio.o(i.PORT_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
</UL>

<P><STRONG><a name="[119]"></a>PWC_Fcg0PeriphClockCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32f46x_pwc.o(i.PWC_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWC_Fcg0PeriphClockCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[11a]"></a>PWC_Fcg1PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32f46x_pwc.o(i.PWC_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWC_Fcg1PeriphClockCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart_init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[11b]"></a>PWC_Fcg2PeriphClockCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hc32f46x_pwc.o(i.PWC_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWC_Fcg2PeriphClockCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[c3]"></a>SPI_CS_Deselect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(i.SPI_CS_Deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CS_Deselect &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[c4]"></a>SPI_CS_Select</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(i.SPI_CS_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CS_Select &rArr; PORT_ResetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[11c]"></a>SPI_Cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hc32f46x_spi.o(i.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Cmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[11d]"></a>SPI_Configuration</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, spi.o(i.SPI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_Configuration &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[c2]"></a>SPI_CrisEnter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_CrisEnter))
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[c1]"></a>SPI_CrisExit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_CrisExit))
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[120]"></a>SPI_GetFlag</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, hc32f46x_spi.o(i.SPI_GetFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_GetFlag &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
</UL>

<P><STRONG><a name="[11f]"></a>SPI_Init</STRONG> (Thumb, 1394 bytes, Stack size 16 bytes, hc32f46x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[c6]"></a>SPI_ReadByte</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, spi.o(i.SPI_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_ReadByte &rArr; SPI_GetFlag &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[122]"></a>SPI_ReceiveData8</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, hc32f46x_spi.o(i.SPI_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_ReceiveData8 &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
</UL>

<P><STRONG><a name="[121]"></a>SPI_SendData8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hc32f46x_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteByte
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadByte
</UL>

<P><STRONG><a name="[c5]"></a>SPI_WriteByte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, spi.o(i.SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_WriteByte &rArr; SPI_GetFlag &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[16]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[20c]"></a>SysTick_Init</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, hc32f46x_utility.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[f9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, system_hc32f46x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a8]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, system_hc32f46x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>TIMER0_BaseInit</STRONG> (Thumb, 1796 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.TIMER0_BaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIMER0_BaseInit &rArr; AsyncDelay &rArr; TIMER0_GetClkMode &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
</UL>

<P><STRONG><a name="[129]"></a>TIMER0_Cmd</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIMER0_Cmd &rArr; AsyncDelay &rArr; TIMER0_GetClkMode &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
</UL>

<P><STRONG><a name="[12a]"></a>TIMER0_IntCmd</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, hc32f46x_timer0.o(i.TIMER0_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIMER0_IntCmd &rArr; AsyncDelay &rArr; TIMER0_GetClkMode &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
</UL>

<P><STRONG><a name="[af]"></a>Timer0A_CallBack</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, logic_control_bsp.o(i.Timer0A_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0A_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control_bsp.o(i.logic_control_time_int)
</UL>
<P><STRONG><a name="[12b]"></a>Timer6_ConfigIrq</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, hc32f46x_timer6.o(i.Timer6_ConfigIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer6_ConfigIrq &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[12c]"></a>Timer6_Init</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, hc32f46x_timer6.o(i.Timer6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer6_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[bb]"></a>Timer6_OverFlow_CallBack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rs458_analysis.o(i.Timer6_OverFlow_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer6_OverFlow_CallBack &rArr; common_idle_judge &rArr; common_cache_data
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_idle_judge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_bsp.o(i.time6_init)
</UL>
<P><STRONG><a name="[12e]"></a>Timer6_SetPeriod</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, hc32f46x_timer6.o(i.Timer6_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer6_SetPeriod &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[12f]"></a>Timer6_SetTriggerSrc0</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hc32f46x_timer6.o(i.Timer6_SetTriggerSrc0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer6_SetTriggerSrc0 &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[130]"></a>Timer6_StartCount</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32f46x_timer6.o(i.Timer6_StartCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer6_StartCount &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[136]"></a>USART_ClearStatus</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, hc32f46x_usart.o(i.USART_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_ErrIrqCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_ErrIrqCallback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_send_buff
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_send_buff
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[187]"></a>USART_FuncCmd</STRONG> (Thumb, 562 bytes, Stack size 20 bytes, hc32f46x_usart.o(i.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[131]"></a>USART_GetStatus</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hc32f46x_usart.o(i.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_GetStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart4_ErrIrqCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_ErrIrqCallback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_send_buff
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_send_buff
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[132]"></a>USART_RecData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32f46x_usart.o(i.USART_RecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_RecData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx4IrqCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx3IrqCallback
</UL>

<P><STRONG><a name="[133]"></a>USART_SendData</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hc32f46x_usart.o(i.USART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_send_buff
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_send_buff
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
</UL>

<P><STRONG><a name="[134]"></a>USART_SetBaudrate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f46x_usart.o(i.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[135]"></a>USART_UART_Init</STRONG> (Thumb, 908 bytes, Stack size 32 bytes, hc32f46x_usart.o(i.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART_UART_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[12]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hc32f46x_interrupts.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f46x.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>UsartRx3IrqCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rs458_analysis.o(i.UsartRx3IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartRx3IrqCallback &rArr; USART_RecData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_receive_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_bsp.o(i.usart3_init)
</UL>
<P><STRONG><a name="[be]"></a>UsartRx4IrqCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rs458_analysis.o(i.UsartRx4IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartRx4IrqCallback &rArr; USART_RecData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RecData
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_receive_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_bsp.o(i.usart4_init)
</UL>
<P><STRONG><a name="[138]"></a>WDT_Init</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, hc32f46x_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WDT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_config
</UL>

<P><STRONG><a name="[1d8]"></a>WDT_RefreshCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32f46x_wdt.o(i.WDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[102]"></a>WIZCHIP_READ</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, w5500.o(i.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_conflict
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
</UL>

<P><STRONG><a name="[fe]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
</UL>

<P><STRONG><a name="[151]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, w5500.o(i.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_conflict
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
</UL>

<P><STRONG><a name="[ff]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, w5500.o(i.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_conflict
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_assign
</UL>

<P><STRONG><a name="[139]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[232]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[109]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>

<P><STRONG><a name="[233]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[234]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13b]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[235]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[236]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[237]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[184]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[238]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[239]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[23a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[141]"></a>analysis_of_air_conditioning_instructions</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.analysis_of_air_conditioning_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = analysis_of_air_conditioning_instructions &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_analysis_form_subscribe
</UL>

<P><STRONG><a name="[143]"></a>boot_mark_set</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ethernet_iap.o(i.boot_mark_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = boot_mark_set &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_finish
</UL>

<P><STRONG><a name="[b6]"></a>broker_task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, broker_task.o(i.broker_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = broker_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_broker_information
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_handle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[14d]"></a>button_handle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gpio_manage_business.o(i.button_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = button_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
</UL>

<P><STRONG><a name="[14f]"></a>button_scanf</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, gpio_manage_driver.o(i.button_scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = button_scanf &rArr; gpio_bsp_read &rArr; PORT_GetBit &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
</UL>

<P><STRONG><a name="[108]"></a>check_DHCP_leasedIP</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dhcp.o(i.check_DHCP_leasedIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = check_DHCP_leasedIP &rArr; send_DHCP_DECLINE &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DECLINE
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
</UL>

<P><STRONG><a name="[107]"></a>check_DHCP_timeout</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, dhcp.o(i.check_DHCP_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = check_DHCP_timeout &rArr; send_DHCP_REQUEST &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_DHCP_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
</UL>

<P><STRONG><a name="[15c]"></a>check_subscribe_information</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, broker_task.o(i.check_subscribe_information))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_subscribe_payload
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_send_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_send_handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_send_handle
</UL>

<P><STRONG><a name="[19a]"></a>clear_connect_num</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ethernet_operation.o(i.clear_connect_num))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_driver_init
</UL>

<P><STRONG><a name="[154]"></a>clear_iap_flag</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ethernet_iap.o(i.clear_iap_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clear_iap_flag &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_time_handle
</UL>

<P><STRONG><a name="[149]"></a>clear_release_information</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, broker_task.o(i.clear_release_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_release_information
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_subscribe_payload
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_send_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_send_handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_send_handle
</UL>

<P><STRONG><a name="[155]"></a>close</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, socket.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_balanced
</UL>

<P><STRONG><a name="[156]"></a>close_balanced</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ethernet_operation.o(i.close_balanced))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = close_balanced &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
</UL>

<P><STRONG><a name="[157]"></a>cloud_analysis_handle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernet_data_handle.o(i.cloud_analysis_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cloud_analysis_handle &rArr; directional_release_data
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
</UL>

<P><STRONG><a name="[205]"></a>cloud_data_monitor_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernet_operation.o(i.cloud_data_monitor_clear))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
</UL>

<P><STRONG><a name="[159]"></a>cloud_data_monitor_reset</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ethernet_operation.o(i.cloud_data_monitor_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cloud_data_monitor_reset &rArr; ethernet_task_state_channge &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_task_state_channge
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[15b]"></a>cloud_send_handle</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ethernet_data_handle.o(i.cloud_send_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cloud_send_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_release_information
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_subscribe_information
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
</UL>

<P><STRONG><a name="[1af]"></a>combination_lamp_update_status</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, local_hotel_agreement.o(i.combination_lamp_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = combination_lamp_update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_combination_handle
</UL>

<P><STRONG><a name="[1b6]"></a>combination_state_synchronization</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, local_hotel_agreement.o(i.combination_state_synchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = combination_state_synchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>

<P><STRONG><a name="[1ae]"></a>combined_byte_mapping</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, local_hotel_agreement.o(i.combined_byte_mapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = combined_byte_mapping
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_combination_handle
</UL>

<P><STRONG><a name="[15e]"></a>common_cache_data</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rs458_analysis.o(i.common_cache_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = common_cache_data
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_idle_judge
</UL>

<P><STRONG><a name="[12d]"></a>common_idle_judge</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rs458_analysis.o(i.common_idle_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = common_idle_judge &rArr; common_cache_data
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;common_cache_data
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_OverFlow_CallBack
</UL>

<P><STRONG><a name="[137]"></a>common_receive_refresh</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rs458_analysis.o(i.common_receive_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx4IrqCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRx3IrqCallback
</UL>

<P><STRONG><a name="[15f]"></a>communication_485_analysis</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.communication_485_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = communication_485_analysis &rArr; outside_485_analysis &rArr; debug_ethernet_transmission &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_485_analysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_485_analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_analysis_form_subscribe
</UL>

<P><STRONG><a name="[162]"></a>communication_485_handle</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, local_hotel_agreement.o(i.communication_485_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = communication_485_handle &rArr; hotle_agreement_handle &rArr; hotle_agreement_combination_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_handle
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_execute
</UL>

<P><STRONG><a name="[1c0]"></a>compare_hex_buff</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, local_hotel_agreement.o(i.compare_hex_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = compare_hex_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_control_handle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_analysis
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_analysis
</UL>

<P><STRONG><a name="[166]"></a>connect</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, socket.o(i.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = connect &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
</UL>

<P><STRONG><a name="[ba]"></a>control_task</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, gpio_manage_business.o(i.control_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = control_task &rArr; button_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_subscribe_payload
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_driver_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_single
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_driver_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scanf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[16b]"></a>copy_system_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_task.o(i.copy_system_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_system_data
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_set_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scene_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_room_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_logic_data
</UL>

<P><STRONG><a name="[16c]"></a>ctlnetwork</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wizchip_conf.o(i.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctlnetwork &rArr; wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_init
</UL>

<P><STRONG><a name="[173]"></a>ctlwizchip</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, wizchip_conf.o(i.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_init
</UL>

<P><STRONG><a name="[180]"></a>data_analysis_handle</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, rs458_analysis.o(i.data_analysis_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = data_analysis_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_task
</UL>

<P><STRONG><a name="[183]"></a>debug_output</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, debug_bsp.o(i.debug_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>

<P><STRONG><a name="[14e]"></a>debug_printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, debug_bsp.o(i.debug_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_output
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_task
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_read_subscribe
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_handle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_receive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_finish
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_iap_flag
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_send_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_send_handle
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_set
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_time_handle
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_conflict
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_data_monitor_reset
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_driver_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_task_state_channge
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_analysis_handle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_analysis_handle
</UL>

<P><STRONG><a name="[186]"></a>debug_usart_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, debug_bsp.o(i.debug_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = debug_usart_init &rArr; USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[4]"></a>default_ip_assign</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dhcp.o(i.default_ip_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = default_ip_assign &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_update
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcp.o(i.reg_dhcp_cbfunc)
<LI> dhcp.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>default_ip_conflict</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dhcp.o(i.default_ip_conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = default_ip_conflict &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcp.o(i.reg_dhcp_cbfunc)
<LI> dhcp.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>default_ip_update</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(i.default_ip_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = default_ip_update &rArr; default_ip_assign &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_ip_assign
</UL>
<BR>[Address Reference Count : 2]<UL><LI> dhcp.o(i.reg_dhcp_cbfunc)
<LI> dhcp.o(.data)
</UL>
<P><STRONG><a name="[158]"></a>directional_release_data</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, broker_task.o(i.directional_release_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = directional_release_data
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_analysis_handle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_analysis_handle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_analysis_handle
</UL>

<P><STRONG><a name="[189]"></a>directional_release_data_to_cache</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, broker_task.o(i.directional_release_data_to_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_buff_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485inside_release_data_to_cache
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_handle
</UL>

<P><STRONG><a name="[18a]"></a>disconnect</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, socket.o(i.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disconnect &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
</UL>

<P><STRONG><a name="[18b]"></a>dns_answer</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dns.o(i.dns_answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
</UL>

<P><STRONG><a name="[18e]"></a>dns_makequery</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, dns.o(i.dns_makequery))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dns_makequery &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
</UL>

<P><STRONG><a name="[192]"></a>dns_question</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dns.o(i.dns_question))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = dns_question &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
</UL>

<P><STRONG><a name="[195]"></a>enIrqRegistration</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hc32f46x_interrupts.o(i.enIrqRegistration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enIrqRegistration &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[196]"></a>ethernet_data_analysis</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ethernet_hotel_agreement.o(i.ethernet_data_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethernet_data_analysis &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_analysis_form_subscribe
</UL>

<P><STRONG><a name="[d7]"></a>ethernet_driver_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ethernet_operation.o(i.ethernet_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ethernet_driver_init &rArr; w5500_init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_user_reset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uid_num
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_connect_num
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_task_state_channge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_task.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>ethernet_run</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, ethernet_operation.o(i.ethernet_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ethernet_run &rArr; scoket_dns_handle &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_time_handle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run_reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_data_monitor_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_task.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>ethernet_run_reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ethernet_operation.o(i.ethernet_run_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ethernet_run_reset &rArr; ethernet_task_state_channge &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_task_state_channge
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[1d7]"></a>ethernet_send_hearbeat</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_hotel_agreement.o(i.ethernet_send_hearbeat))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[b8]"></a>ethernet_task</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ethernet_task.o(i.ethernet_task))
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[15a]"></a>ethernet_task_state_channge</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethernet_task.o(i.ethernet_task_state_channge))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ethernet_task_state_channge &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run_reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_data_monitor_reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_driver_init
</UL>

<P><STRONG><a name="[19f]"></a>flash_data_check</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, data_task.o(i.flash_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_data_check &rArr; write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uesr_data_reset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_data
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_system_data
</UL>

<P><STRONG><a name="[1a3]"></a>flash_erase</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flash_bsp.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = flash_erase &rArr; EFM_SectorErase &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_receive
</UL>

<P><STRONG><a name="[216]"></a>flash_read_data</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, flash_bsp.o(i.flash_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_system_data
</UL>

<P><STRONG><a name="[1a4]"></a>flash_write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, flash_bsp.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_write &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_receive
</UL>

<P><STRONG><a name="[1a5]"></a>flash_write_data</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, flash_bsp.o(i.flash_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SingleProgram
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SectorErase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetFlagStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_FlashCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_data
</UL>

<P><STRONG><a name="[aa]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hc32f46x_utility.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugOutput
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1e1]"></a>getDHCPLeasetime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dhcp.o(i.getDHCPLeasetime))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
</UL>

<P><STRONG><a name="[1df]"></a>getDNSfromDHCP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dhcp.o(i.getDNSfromDHCP))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
</UL>

<P><STRONG><a name="[1dd]"></a>getGWfromDHCP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dhcp.o(i.getGWfromDHCP))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
</UL>

<P><STRONG><a name="[1dc]"></a>getIPfromDHCP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dhcp.o(i.getIPfromDHCP))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
</UL>

<P><STRONG><a name="[1de]"></a>getSNfromDHCP</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dhcp.o(i.getSNfromDHCP))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
</UL>

<P><STRONG><a name="[1a7]"></a>getSn_RX_RSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, w5500.o(i.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_RX_RSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDHCPMSG
</UL>

<P><STRONG><a name="[1a8]"></a>getSn_TX_FSR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, w5500.o(i.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getSn_TX_FSR &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[1a9]"></a>gpio_bsp_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, gpio_manage_bsp_hc32f64.o(i.gpio_bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpio_bsp_init &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DebugPortSetting
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_driver_init
</UL>

<P><STRONG><a name="[150]"></a>gpio_bsp_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gpio_manage_bsp_hc32f64.o(i.gpio_bsp_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_bsp_read &rArr; PORT_GetBit &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_scanf
</UL>

<P><STRONG><a name="[1aa]"></a>gpio_bsp_write</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio_manage_bsp_hc32f64.o(i.gpio_bsp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gpio_bsp_write &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_driver_write
</UL>

<P><STRONG><a name="[167]"></a>gpio_driver_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gpio_manage_driver.o(i.gpio_driver_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gpio_driver_init &rArr; gpio_bsp_init &rArr; PORT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
</UL>

<P><STRONG><a name="[1fc]"></a>hex_to_ascii</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, debug_bsp.o(i.hex_to_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hex_to_ascii
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_set
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_analysis_handle
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_analysis_handle
</UL>

<P><STRONG><a name="[d3]"></a>hotel_air_conditioner_instructions</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_air_conditioner_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hotel_air_conditioner_instructions
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_air_conditioner_package_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>hotel_air_conditioner_package_send</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, local_hotel_agreement.o(i.hotel_air_conditioner_package_send))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_air_conditioner_instructions
</UL>

<P><STRONG><a name="[d1]"></a>hotel_call_service_instructions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_call_service_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_call_service_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>hotel_card_power_on_instructions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_card_power_on_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_card_power_on_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>hotel_cleaning_instructions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_cleaning_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_cleaning_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>hotel_combination_instructions</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_combination_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_combination_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>hotel_curtain_instructions</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_curtain_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_curtain_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>hotel_do_not_disturb_instructions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_do_not_disturb_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_do_not_disturb_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>hotel_doorbell_instructions</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernet_hotel_agreement.o(i.hotel_doorbell_instructions))
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>hotel_lamp_instructions</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_lamp_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_lamp_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>hotel_null_instructions</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernet_hotel_agreement.o(i.hotel_null_instructions))
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>hotel_open_door_instructions</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_open_door_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_open_door_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>hotel_reservation_check_instructions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_reservation_check_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_reservation_check_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>hotel_scene_instructions</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_scene_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_scene_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>hotel_sos_instructions</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ethernet_hotel_agreement.o(i.hotel_sos_instructions))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hotel_sos_instructions &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_hotel_agreement.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, dns.o(i.htons))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = htons
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swaps
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
</UL>

<P><STRONG><a name="[1bb]"></a>iap_finish</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ethernet_iap.o(i.iap_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iap_finish &rArr; tcp_iap_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_reply
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_mark_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
</UL>

<P><STRONG><a name="[1bd]"></a>iap_receive</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ethernet_iap.o(i.iap_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = iap_receive &rArr; tcp_iap_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_reply
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
</UL>

<P><STRONG><a name="[19e]"></a>iap_time_handle</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ethernet_iap.o(i.iap_time_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iap_time_handle &rArr; clear_iap_flag &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_iap_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[204]"></a>id_transformation</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ethernet_hotel_agreement.o(i.id_transformation))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
</UL>

<P><STRONG><a name="[164]"></a>inside_lookup_handle</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, local_hotel_agreement.o(i.inside_lookup_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inside_lookup_handle &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data_to_cache
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_handle
</UL>

<P><STRONG><a name="[1c1]"></a>key_buff_check</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, logic_key_handle.o(i.key_buff_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = key_buff_check
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_directional_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_execute
</UL>

<P><STRONG><a name="[1c3]"></a>key_buff_clear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, logic_key_handle.o(i.key_buff_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_buff_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1c4]"></a>key_buff_read</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, logic_key_handle.o(i.key_buff_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_buff_read &rArr; key_read_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_execute
</UL>

<P><STRONG><a name="[194]"></a>key_buff_write</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, logic_key_handle.o(i.key_buff_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dry_contac_input_analysis
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_sos_instructions
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_scene_instructions
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_reservation_check_instructions
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_open_door_instructions
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_lamp_instructions
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_do_not_disturb_instructions
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_curtain_instructions
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_combination_instructions
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_cleaning_instructions
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_card_power_on_instructions
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotel_call_service_instructions
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_analysis
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_analysis
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_analysis
</UL>

<P><STRONG><a name="[1c7]"></a>key_card_power_off</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, logic_key_handle.o(i.key_card_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_card_power_off &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1c8]"></a>key_card_power_on_judge</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, logic_key_handle.o(i.key_card_power_on_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_card_power_on_judge &rArr; key_delay_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay_buff_write
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay_buff_directional_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
</UL>

<P><STRONG><a name="[1c9]"></a>key_delay_buff_directional_clear</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, logic_key_handle.o(i.key_delay_buff_directional_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_card_power_on_judge
</UL>

<P><STRONG><a name="[1ca]"></a>key_delay_buff_write</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, logic_key_handle.o(i.key_delay_buff_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_delay_buff_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mapping_judge
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_card_power_on_judge
</UL>

<P><STRONG><a name="[1cb]"></a>key_delay_scanf_handle</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, logic_key_handle.o(i.key_delay_scanf_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_delay_scanf_handle &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_interrupt_callback
</UL>

<P><STRONG><a name="[1c2]"></a>key_directional_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, logic_key_handle.o(i.key_directional_check))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_check
</UL>

<P><STRONG><a name="[1cc]"></a>key_mapping_judge</STRONG> (Thumb, 352 bytes, Stack size 20 bytes, logic_key_handle.o(i.key_mapping_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = key_mapping_judge &rArr; key_delay_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay_buff_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
</UL>

<P><STRONG><a name="[1cd]"></a>key_mutex_judge</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, logic_key_handle.o(i.key_mutex_judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_mutex_judge &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
</UL>

<P><STRONG><a name="[1c5]"></a>key_read_directional_cache</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, logic_key_handle.o(i.key_read_directional_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_read_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_read
</UL>

<P><STRONG><a name="[ad]"></a>key_value_analysis_form_subscribe</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, logic_control_task.o(i.key_value_analysis_form_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = key_value_analysis_form_subscribe &rArr; communication_485_analysis &rArr; outside_485_analysis &rArr; debug_ethernet_transmission &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_data_analysis
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_analysis
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analysis_of_air_conditioning_instructions
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dry_contac_input_analysis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control_task.o(i.key_value_analysis_cache)
</UL>
<P><STRONG><a name="[1d1]"></a>key_value_logic_handle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, logic_key_handle.o(i.key_value_logic_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = key_value_logic_handle &rArr; key_mapping_judge &rArr; key_delay_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_write_directional_cache
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_read_directional_cache
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mutex_judge
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mapping_judge
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_directional_check
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_card_power_on_judge
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1c6]"></a>key_write_directional_cache</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, logic_key_handle.o(i.key_write_directional_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_write_directional_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay_scanf_handle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_card_power_off
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mutex_judge
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_mapping_judge
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_card_power_on_judge
</UL>

<P><STRONG><a name="[1b0]"></a>lamp_f1_command_package</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.lamp_f1_command_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lamp_f1_command_package
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_scene_handle
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_lamp_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_combination_handle
</UL>

<P><STRONG><a name="[1d2]"></a>local_send_handle</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ethernet_data_handle.o(i.local_send_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = local_send_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_release_information
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_subscribe_information
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_set
</UL>

<P><STRONG><a name="[ae]"></a>logic_control_interrupt_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logic_control_task.o(i.logic_control_interrupt_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = logic_control_interrupt_callback &rArr; key_delay_scanf_handle &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_delay_scanf_handle
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_data_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic_control_task.o(i.logic_control_task)
</UL>
<P><STRONG><a name="[b9]"></a>logic_control_task</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, logic_control_task.o(i.logic_control_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = logic_control_task &rArr; key_value_execute &rArr; communication_485_handle &rArr; hotle_agreement_handle &rArr; hotle_agreement_combination_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_read_system_data
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_time_int
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_logic_handle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_card_power_off
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_clear
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_send_hearbeat
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uid_data
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_execute
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_analysis_cache
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[1d5]"></a>logic_control_time_int</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, logic_control_bsp.o(i.logic_control_time_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = logic_control_time_int &rArr; TIMER0_BaseInit &rArr; AsyncDelay &rArr; TIMER0_GetClkMode &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[a7]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1db]"></a>makeDHCPMSG</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, dhcp.o(i.makeDHCPMSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = makeDHCPMSG &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DECLINE
</UL>

<P><STRONG><a name="[c8]"></a>my_ip_assign</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ethernet_operation.o(i.my_ip_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = my_ip_assign &rArr; network_init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSNfromDHCP
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getIPfromDHCP
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGWfromDHCP
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDNSfromDHCP
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDHCPLeasetime
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[c7]"></a>my_ip_conflict</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet_operation.o(i.my_ip_conflict))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = my_ip_conflict &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_user_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(i.w5500_init)
</UL>
<P><STRONG><a name="[1e0]"></a>network_init</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, ethernet_operation.o(i.network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = network_init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_assign
</UL>

<P><STRONG><a name="[18d]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dns.o(i.ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ntohs &rArr; htons
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
</UL>

<P><STRONG><a name="[163]"></a>outside_lookup_handle</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, local_hotel_agreement.o(i.outside_lookup_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = outside_lookup_handle &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data_to_cache
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_handle
</UL>

<P><STRONG><a name="[104]"></a>parseDHCPMSG</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, dhcp.o(i.parseDHCPMSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = parseDHCPMSG &rArr; recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
</UL>

<P><STRONG><a name="[1e4]"></a>parseMSG</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, dns.o(i.parseMSG))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_question
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
</UL>

<P><STRONG><a name="[18c]"></a>parse_name</STRONG> (Thumb, 156 bytes, Stack size 284 bytes, dns.o(i.parse_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_question
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_answer
</UL>

<P><STRONG><a name="[1f6]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1f4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[169]"></a>read_single</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gpio_manage_driver.o(i.read_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_single
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
</UL>

<P><STRONG><a name="[168]"></a>read_subscribe_payload</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, broker_task.o(i.read_subscribe_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_subscribe_payload &rArr; clear_release_information
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_release_information
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_subscribe_information
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_analysis_cache
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
</UL>

<P><STRONG><a name="[1d4]"></a>read_uid_data</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, logic_control_task.o(i.read_uid_data))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[197]"></a>read_uid_num</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ethernet_operation.o(i.read_uid_num))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_driver_init
</UL>

<P><STRONG><a name="[1f9]"></a>recv</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, socket.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = recv &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_set
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_cloud
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
</UL>

<P><STRONG><a name="[1e3]"></a>recvfrom</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, socket.o(i.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = recvfrom &rArr; wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseDHCPMSG
</UL>

<P><STRONG><a name="[21c]"></a>reg_dhcp_cbfunc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp.o(i.reg_dhcp_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_dhcp_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[219]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cris_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[21a]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[21b]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wizchip_conf.o(i.reg_wizchip_spi_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
</UL>

<P><STRONG><a name="[182]"></a>release_buff_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, broker_task.o(i.release_buff_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_control_handle
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data_to_cache
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_ethernet_transmission
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
</UL>

<P><STRONG><a name="[100]"></a>reset_DHCP_timeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dhcp.o(i.reset_DHCP_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
</UL>

<P><STRONG><a name="[b4]"></a>rs485_inside_analysis_handle</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rs458_task.o(i.rs485_inside_analysis_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rs485_inside_analysis_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_task.o(i.rs485_task)
</UL>
<P><STRONG><a name="[1fd]"></a>rs485_inside_send_buff</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rs458_bsp.o(i.rs485_inside_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rs485_inside_send_buff &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_send_handle
</UL>

<P><STRONG><a name="[b5]"></a>rs485_outside_analysis_handle</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rs458_task.o(i.rs485_outside_analysis_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rs485_outside_analysis_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_task.o(i.rs485_task)
</UL>
<P><STRONG><a name="[1fe]"></a>rs485_outside_send_buff</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rs458_bsp.o(i.rs485_outside_send_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rs485_outside_send_buff &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_send_handle
</UL>

<P><STRONG><a name="[1ff]"></a>rs485_send_handle</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, rs458_task.o(i.rs485_send_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rs485_send_handle &rArr; rs485_outside_send_buff &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_release_information
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_subscribe_information
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_outside_send_buff
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_inside_send_buff
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_task
</UL>

<P><STRONG><a name="[b7]"></a>rs485_task</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, rs458_task.o(i.rs485_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rs485_task &rArr; rs485_usart_init &rArr; usart4_init &rArr; USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_usart_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_analysis_handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_send_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_task.o(i.start_task)
</UL>
<P><STRONG><a name="[200]"></a>rs485_usart_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rs458_bsp.o(i.rs485_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rs485_usart_init &rArr; usart4_init &rArr; USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_task
</UL>

<P><STRONG><a name="[1b1]"></a>rs485inside_release_data_to_cache</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, local_hotel_agreement.o(i.rs485inside_release_data_to_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data_to_cache
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_service_handle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_scene_handle
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_lamp_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_combination_handle
</UL>

<P><STRONG><a name="[1b7]"></a>scene_mode_lamp_update_status</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.scene_mode_lamp_update_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scene_mode_lamp_update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_scene_handle
</UL>

<P><STRONG><a name="[3]"></a>scoket_balanced</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ethernet_data_handle.o(i.scoket_balanced))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = scoket_balanced &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id_transformation
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_balanced
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>scoket_cloud</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ethernet_data_handle.o(i.scoket_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = scoket_cloud &rArr; cloud_send_handle &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_send_handle
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_analysis_handle
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_data_monitor_clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(.data)
</UL>
<P><STRONG><a name="[19c]"></a>scoket_dns_handle</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, ethernet_operation.o(i.scoket_dns_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = scoket_dns_handle &rArr; parseMSG &rArr; dns_answer &rArr; parse_name
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseMSG
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_makequery
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run_reset
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[1]"></a>scoket_set</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ethernet_data_handle.o(i.scoket_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = scoket_set &rArr; tcp_set_handle &rArr; tcp_iap_handle &rArr; iap_receive &rArr; tcp_iap_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_ascii
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_send_handle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(.data)
</UL>
<P><STRONG><a name="[19b]"></a>scoket_tcp_handle</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, ethernet_operation.o(i.scoket_tcp_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = scoket_tcp_handle &rArr; ethernet_run_reset &rArr; ethernet_task_state_channge &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_balanced
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[2]"></a>scoket_udp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethernet_data_handle.o(i.scoket_udp))
<BR>[Address Reference Count : 1]<UL><LI> ethernet_operation.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>send</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, socket.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_reply
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_reply
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_send_handle
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cloud_send_handle
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_balanced
</UL>

<P><STRONG><a name="[153]"></a>send_DHCP_DECLINE</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, dhcp.o(i.send_DHCP_DECLINE))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_DHCP_DECLINE &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
</UL>

<P><STRONG><a name="[105]"></a>send_DHCP_DISCOVER</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, dhcp.o(i.send_DHCP_DISCOVER))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_DHCP_DISCOVER &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
</UL>

<P><STRONG><a name="[106]"></a>send_DHCP_REQUEST</STRONG> (Thumb, 886 bytes, Stack size 24 bytes, dhcp.o(i.send_DHCP_REQUEST))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = send_DHCP_REQUEST &rArr; sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeDHCPMSG
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_timeout
</UL>

<P><STRONG><a name="[152]"></a>sendto</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, socket.o(i.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sendto &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_REQUEST
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DISCOVER
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_DHCP_DECLINE
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_DHCP_leasedIP
</UL>

<P><STRONG><a name="[1b9]"></a>service_f0_command_package</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, local_hotel_agreement.o(i.service_f0_command_package))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_service_handle
</UL>

<P><STRONG><a name="[1b8]"></a>service_transformation</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.service_transformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = service_transformation
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_service_handle
</UL>

<P><STRONG><a name="[1a1]"></a>set_system_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_task.o(i.set_system_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_system_data
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_check
</UL>

<P><STRONG><a name="[103]"></a>socket</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, socket.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = socket &rArr; close &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_run
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
</UL>

<P><STRONG><a name="[b0]"></a>start_task</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, start_task.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = start_task &rArr; debug_usart_init &rArr; USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1ba]"></a>swaps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dns.o(i.swaps))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[16a]"></a>switch_driver_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, gpio_manage_driver.o(i.switch_driver_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = switch_driver_write &rArr; gpio_bsp_write &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bsp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_handle
</UL>

<P><STRONG><a name="[20a]"></a>switch_handle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio_manage_business.o(i.switch_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = switch_handle &rArr; switch_driver_write &rArr; gpio_bsp_write &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_driver_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_read_subscribe
</UL>

<P><STRONG><a name="[ac]"></a>switch_read_subscribe</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gpio_manage_business.o(i.switch_read_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = switch_read_subscribe &rArr; debug_printf &rArr; debug_output &rArr; USART_SendData &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio_manage_business.o(i.control_task)
</UL>
<P><STRONG><a name="[208]"></a>system_clk_init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, start_task.o(i.system_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_clk_init &rArr; CLK_XtalCmd &rArr; CLK_GetFlagStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Unlock
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetLatency
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_Lock
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysClkConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClkSource
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetPllSource
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_MpllCmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_HrcCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetFlagStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[20d]"></a>tcp_iap_handle</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, ethernet_iap.o(i.tcp_iap_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_iap_handle &rArr; iap_receive &rArr; tcp_iap_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_reply
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_receive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_finish
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_iap_flag
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_time_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
</UL>

<P><STRONG><a name="[1bc]"></a>tcp_iap_reply</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ethernet_iap.o(i.tcp_iap_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_iap_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_receive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_finish
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
</UL>

<P><STRONG><a name="[206]"></a>tcp_set_handle</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ethernet_data_handle.o(i.tcp_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_set_handle &rArr; tcp_iap_handle &rArr; iap_receive &rArr; tcp_iap_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;directional_release_data
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_iap_handle
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_reply
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_set_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scene_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_room_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_logic_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_set
</UL>

<P><STRONG><a name="[20f]"></a>tcp_set_reply</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ethernet_data_handle.o(i.tcp_set_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_set_reply &rArr; send &rArr; wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
</UL>

<P><STRONG><a name="[203]"></a>time6_init</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, rs458_bsp.o(i.time6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = time6_init &rArr; Timer6_SetPeriod &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg2PeriphClockCmd
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_StartCount
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_SetTriggerSrc0
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_SetPeriod
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_ConfigIrq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_usart_init
</UL>

<P><STRONG><a name="[1a0]"></a>uesr_data_reset</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, logic_control_task.o(i.uesr_data_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uesr_data_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_check
</UL>

<P><STRONG><a name="[201]"></a>usart3_init</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, rs458_bsp.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = usart3_init &rArr; USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_usart_init
</UL>

<P><STRONG><a name="[202]"></a>usart4_init</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, rs458_bsp.o(i.usart4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = usart4_init &rArr; USART_SetBaudrate &rArr; SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enIrqRegistration
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_Fcg1PeriphClockCmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetFunc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_usart_init
</UL>

<P><STRONG><a name="[1d3]"></a>user_read_system_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, data_task.o(i.user_read_system_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = user_read_system_data &rArr; flash_data_check &rArr; write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_data
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_check
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1e6]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f5]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1f3]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1e8]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1e7]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1ea]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1ec]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f1]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[21f]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[14c]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_task
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_task
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_receive
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_finish
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_user_reset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_tcp_handle
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scoket_dns_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_run
</UL>

<P><STRONG><a name="[209]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1da]"></a>vTaskStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ee]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[e0]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[199]"></a>w5500_init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ethernet_operation.o(i.w5500_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = w5500_init &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_printf
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cris_cbfunc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_dhcp_cbfunc
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCP_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_user_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_driver_init
</UL>

<P><STRONG><a name="[21d]"></a>w5500_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(i.w5500_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_reset &rArr; PORT_ResetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_user_reset
</UL>

<P><STRONG><a name="[21e]"></a>w5500_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi.o(i.w5500_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = w5500_set &rArr; PORT_SetBits &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_user_reset
</UL>

<P><STRONG><a name="[198]"></a>w5500_user_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ethernet_operation.o(i.w5500_user_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = w5500_user_reset &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_set
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_ip_conflict
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_driver_init
</UL>

<P><STRONG><a name="[1d6]"></a>wdt_config</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, logic_control_bsp.o(i.wdt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wdt_config &rArr; WDT_Init &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_RefreshCounter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1fa]"></a>wiz_recv_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, w5500.o(i.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[1fb]"></a>wiz_recv_ignore</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, w5500.o(i.wiz_recv_ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiz_recv_ignore &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[207]"></a>wiz_send_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, w5500.o(i.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[b]"></a>wizchip_bus_readbyte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>wizchip_bus_writebyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_bus_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[7]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_enter))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cris_exit))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(i.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>wizchip_getinterrupt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[179]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[16e]"></a>wizchip_getnetinfo</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[170]"></a>wizchip_getnetmode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_getnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_getnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[172]"></a>wizchip_gettimeout</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_gettimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_gettimeout &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[175]"></a>wizchip_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, wizchip_conf.o(i.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[178]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[16d]"></a>wizchip_setnetinfo</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[16f]"></a>wizchip_setnetmode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizchip_setnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[171]"></a>wizchip_settimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizchip_settimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizchip_settimeout &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[b2]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[b3]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(i.wizchip_spi_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(i.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[174]"></a>wizchip_sw_reset</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wizchip_conf.o(i.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
</UL>

<P><STRONG><a name="[17c]"></a>wizphy_getphyconf</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_getphyconf &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[17f]"></a>wizphy_getphylink</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[17e]"></a>wizphy_getphypmode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_getphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_getphypmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[17a]"></a>wizphy_reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wizchip_conf.o(i.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
</UL>

<P><STRONG><a name="[17b]"></a>wizphy_setphyconf</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[17d]"></a>wizphy_setphypmode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wizchip_conf.o(i.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizphy_setphypmode &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[210]"></a>write_logic_data</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, data_task.o(i.write_logic_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_logic_data &rArr; write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_system_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
</UL>

<P><STRONG><a name="[211]"></a>write_room_data</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, data_task.o(i.write_room_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_room_data &rArr; write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_system_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
</UL>

<P><STRONG><a name="[20e]"></a>write_scene_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, data_task.o(i.write_scene_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write_scene_data &rArr; write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_system_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
</UL>

<P><STRONG><a name="[212]"></a>write_set_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, data_task.o(i.write_set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_set_data &rArr; write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_system_data
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_system_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_handle
</UL>

<P><STRONG><a name="[1a2]"></a>write_system_data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, data_task.o(i.write_system_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_system_data &rArr; flash_write_data &rArr; EFM_SingleProgram &rArr; EFM_ErasePgmCmd &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_set_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_scene_data
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_room_data
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_logic_data
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_check
</UL>

<P><STRONG><a name="[218]"></a>xPortStartScheduler</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d9]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ef]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[147]"></a>broker_handle</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, broker_task.o(i.broker_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = broker_handle &rArr; broker_push_information &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_release_information
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_push_information
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_task
</UL>

<P><STRONG><a name="[148]"></a>broker_push_information</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, broker_task.o(i.broker_push_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = broker_push_information &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_handle
</UL>

<P><STRONG><a name="[14b]"></a>clear_broker_information</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, broker_task.o(i.clear_broker_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clear_broker_information
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;broker_task
</UL>

<P><STRONG><a name="[188]"></a>delay_data_release</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, logic_control_task.o(i.delay_data_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_data_release
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_interrupt_callback
</UL>

<P><STRONG><a name="[193]"></a>dry_contac_input_analysis</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, logic_control_task.o(i.dry_contac_input_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dry_contac_input_analysis &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_analysis_form_subscribe
</UL>

<P><STRONG><a name="[1ce]"></a>key_value_analysis_cache</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logic_control_task.o(i.key_value_analysis_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = key_value_analysis_cache &rArr; read_subscribe_payload &rArr; clear_release_information
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_subscribe_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1cf]"></a>key_value_execute</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, logic_control_task.o(i.key_value_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = key_value_execute &rArr; communication_485_handle &rArr; hotle_agreement_handle &rArr; hotle_agreement_combination_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_read
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_check
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_control_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logic_control_task
</UL>

<P><STRONG><a name="[1d0]"></a>output_control_handle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, logic_control_task.o(i.output_control_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = output_control_handle &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_hex_buff
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_buff_write
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_value_execute
</UL>

<P><STRONG><a name="[181]"></a>debug_ethernet_transmission</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, local_hotel_agreement.o(i.debug_ethernet_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = debug_ethernet_transmission &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_buff_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485inside_release_data_to_cache
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_handle
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_485_analysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_485_analysis
</UL>

<P><STRONG><a name="[1ac]"></a>hotle_agreement_analysis</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.hotle_agreement_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hotle_agreement_analysis &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_485_analysis
</UL>

<P><STRONG><a name="[1ad]"></a>hotle_agreement_combination_handle</STRONG> (Thumb, 162 bytes, Stack size 88 bytes, local_hotel_agreement.o(i.hotle_agreement_combination_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hotle_agreement_combination_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485inside_release_data_to_cache
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_f1_command_package
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combined_byte_mapping
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combination_lamp_update_status
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>

<P><STRONG><a name="[165]"></a>hotle_agreement_handle</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, local_hotel_agreement.o(i.hotle_agreement_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hotle_agreement_handle &rArr; hotle_agreement_combination_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;combination_state_synchronization
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_service_handle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_scene_handle
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_music
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_lamp_handle
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_combination_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_handle
</UL>

<P><STRONG><a name="[1b2]"></a>hotle_agreement_lamp_handle</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, local_hotel_agreement.o(i.hotle_agreement_lamp_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hotle_agreement_lamp_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485inside_release_data_to_cache
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_f1_command_package
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>

<P><STRONG><a name="[1b5]"></a>hotle_agreement_music</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, local_hotel_agreement.o(i.hotle_agreement_music))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>

<P><STRONG><a name="[1b3]"></a>hotle_agreement_scene_handle</STRONG> (Thumb, 108 bytes, Stack size 80 bytes, local_hotel_agreement.o(i.hotle_agreement_scene_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hotle_agreement_scene_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scene_mode_lamp_update_status
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485inside_release_data_to_cache
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lamp_f1_command_package
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>

<P><STRONG><a name="[1b4]"></a>hotle_agreement_service_handle</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, local_hotel_agreement.o(i.hotle_agreement_service_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hotle_agreement_service_handle &rArr; rs485inside_release_data_to_cache &rArr; directional_release_data_to_cache &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_transformation
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_f0_command_package
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485inside_release_data_to_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_handle
</UL>

<P><STRONG><a name="[160]"></a>inside_485_analysis</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.inside_485_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inside_485_analysis &rArr; debug_ethernet_transmission &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_ethernet_transmission
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_lookup_analysis
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hotle_agreement_analysis
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_analysis
</UL>

<P><STRONG><a name="[1be]"></a>inside_lookup_analysis</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, local_hotel_agreement.o(i.inside_lookup_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inside_lookup_analysis &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_hex_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_485_analysis
</UL>

<P><STRONG><a name="[161]"></a>outside_485_analysis</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, local_hotel_agreement.o(i.outside_485_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = outside_485_analysis &rArr; debug_ethernet_transmission &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transparent_ethernet_transmission
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_lookup_analysis
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_ethernet_transmission
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_485_analysis
</UL>

<P><STRONG><a name="[1e2]"></a>outside_lookup_analysis</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, local_hotel_agreement.o(i.outside_lookup_analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = outside_lookup_analysis &rArr; key_buff_write &rArr; key_write_directional_cache
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_buff_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_hex_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_485_analysis
</UL>

<P><STRONG><a name="[1bf]"></a>transparent_ethernet_transmission</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, local_hotel_agreement.o(i.transparent_ethernet_transmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = transparent_ethernet_transmission &rArr; release_buff_write
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_buff_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outside_485_analysis
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_485_analysis
</UL>

<P><STRONG><a name="[bd]"></a>Usart3_ErrIrqCallback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rs458_bsp.o(i.Usart3_ErrIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usart3_ErrIrqCallback &rArr; USART_GetStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_bsp.o(i.usart3_init)
</UL>
<P><STRONG><a name="[bf]"></a>Usart4_ErrIrqCallback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rs458_bsp.o(i.Usart4_ErrIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Usart4_ErrIrqCallback &rArr; USART_GetStatus &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs458_bsp.o(i.usart4_init)
</UL>
<P><STRONG><a name="[213]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs458_bsp.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[215]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rs458_bsp.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[214]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rs458_bsp.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart4_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time6_init
</UL>

<P><STRONG><a name="[1e5]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1e9]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ed]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1f0]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[c0]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1f2]"></a>prvInitialiseNewTask</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1eb]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[217]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f7]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f8]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[b1]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[123]"></a>SetClkSyncBaudrate</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, hc32f46x_usart.o(i.SetClkSyncBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SetClkSyncBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[125]"></a>SetScBaudrate</STRONG> (Thumb, 340 bytes, Stack size 80 bytes, hc32f46x_usart.o(i.SetScBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetScBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[126]"></a>SetUartBaudrate</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, hc32f46x_usart.o(i.SetUartBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetUartBaudrate &rArr; UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartGetClk
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[124]"></a>UsartGetClk</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f46x_usart.o(i.UsartGetClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UsartGetClk &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUartBaudrate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScBaudrate
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClkSyncBaudrate
</UL>

<P><STRONG><a name="[f1]"></a>AsyncDelay</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, hc32f46x_timer0.o(i.AsyncDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AsyncDelay &rArr; TIMER0_GetClkMode &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_GetClkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IntCmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_BaseInit
</UL>

<P><STRONG><a name="[f2]"></a>TIMER0_GetClkMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, hc32f46x_timer0.o(i.TIMER0_GetClkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER0_GetClkMode &rArr; Ddl_AssertHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ddl_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncDelay
</UL>

<P><STRONG><a name="[13c]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[13f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
